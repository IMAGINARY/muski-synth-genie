{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AGAA,6BAAA,GACA;;;;;;;;;;;;;ACDA,IAAA;AAAA,4CAA0B;;;AEA1B,SAAS,0CAA2B,EAAgB,EAAE,IAAiB,EAAvE;IACE,IAAqC,8BAAA,KAAK,qBAAqB,IAAvD,OAA6B,4BAA7B,MAAM,MAAuB,4BAAvB,KAAK,QAAkB,4BAAlB,OAAO,SAAW,4BAAX;IAC1B,IAAM,IAAI,GAAG,OAAO,GAAG;IACvB,IAAM,IAAI,GAAG,OAAO,GAAG;IACvB,IAAM,OAAO,IAAI;IACjB,IAAM,OAAO,IAAI;IACjB,OAAO;QAAE,GAAA;QAAG,GAAA;QAAG,MAAA;QAAM,MAAA;QAAM,OAAA;QAAO,QAAA;IAAM;AAC1C;AAEA,SAAS,0CACP,MAAkC,EADpC;QAEE,UAAA,iEAAU,GAAG,EACb,WAAA,iEAAW,KAAK,EAChB,gBAAA,iEAAgB,EAAE;IAElB,6BAA6B;IAC7B,IAAM,MAAM,IAAI;IAChB,OAAO,OAAO,CAAC;YAAG,UAAA,GAAG,UAAA;eAAQ,IAAI,IAAI,CAAC,GAAG;;IAEzC,6EAA6E;IAC7E,8CAA8C;IAC9C,kEAAkE;IAClE,kEAAkE;IAClE,IAAM,aAAa,MAAM,CAAC,EAAE;IAC5B,IAAM,YAAY,MAAM,CAAC,OAAO,MAAM,GAAG,EAAE;IAC3C,IAAI,UAAU;QACZ,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC;QACpC,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC;QACpC,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,WAAW,CAAC;IACpC,OAAM;QACL,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE,WAAW,CAAC,GAAG,wCAAwC;QACjF,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC,GAAG,6BAA6B;IAClE,CAAA;IAED,mBAAmB;IACnB,IAAM,MAAM,IAAI;IAEhB,mCAAmC;IACnC,kFAAkF;IAClF,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,GAAG,GAAG,KAAK,EACvC,IAAK,IAAI,IAAI,GAAG,KAAK,eAAe,KAAK,EAAG;QAC1C,uBAAuB;QACvB,IAAM,MAAM,AAAC,CAAA,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,EAAE,AAAD,IAAK;QACxC,IAAM,MAAM,AAAC,CAAA,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,EAAE,AAAD,IAAK;QAEpC,IAAM,MAAM,AAAC,CAAA,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,EAAE,AAAD,IAAK;QACxC,IAAM,MAAM,AAAC,CAAA,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,EAAE,AAAD,IAAK;QAExC,YAAY;QACZ,IAAM,KAAK,IAAI;QAEf,iBAAiB;QACjB,IAAM,KAAK,IAAI,KAAA,IAAA,IAAM,KAAI,IAAI,KAAA,IAAA,IAAM,KAAI;QACvC,IAAM,KAAK,CAAE,CAAA,IAAI,KAAA,IAAA,IAAM,EAAA,IAAK,IAAI,KAAA,IAAA,IAAM;QACtC,IAAM,KAAK,KAAA,IAAA,IAAM,KAAI,IAAI,KAAA,IAAA,IAAM,KAAI;QACnC,IAAM,KAAK,KAAA,IAAA,IAAM,KAAI,KAAA,IAAA,IAAM;QAE3B,iDAAiD;QACjD,IAAM,IAAI,KAAK,GAAG,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK,MAAM,KAAK;QAC1D,IAAM,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK,MAAM,KAAK;QAE9D,wBAAwB;QACxB,IAAI,IAAI,CAAC;YAAE,GAAA;YAAG,GAAA;QAAC;IAChB;IAGH,OAAO;AACT;;;AGnEA;;;;;AAAc,IAAA,AAAO,yDAArB,AAAc;;aAAO,SAOP,IAAY,EAAE,oBAA6B;qFAPpC;QACT,4EAAA,YAAA,KAAA;QAEH,4EAAA,SAAA,KAAA;QAEG,4EAAA,wBAAA,KAAA;QAGR,IAAI,CAAC,QAAQ,GAAG;YAAC,IAAI,MAAM,MAAM,IAAI,CAAC,WAAW,GAAG,CAAC;SAAsB;QAC3E,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,oBAAoB,GAAG;;uEAVX;;YAaf,KAAA;iBAAJ,eAAA;gBACE,OAAO,IAAI,CAAC,KAAK;YACnB;;;YAEI,KAAA;iBAAJ,eAAA;gBACE,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;YAC7B;;;YAEA,KAAA;mBAAA,SAAA,iBAAiB,CAAS,EAA1B;gBAIE,IAAI,cAAc;gBAClB,IAAI,eAAe;gBACnB,MACE,eAAe,IAAI,CAAC,QAAQ,CAAC,MAAM,IACnC,cAAc,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,IAAI,EACpD;oBACA,eAAe,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM;oBACjD,gBAAgB;gBACjB;gBACD,IAAM,iBAAiB,IAAI;gBAC3B,OAAO;oBAAE,cAAA;oBAAc,gBAAA;gBAAc;YACvC;;;YAIA,KAAA;mBAAA,SAAA,IAAI,CAAS,EAAE,YAAgB,EAA/B;gBACE,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,EAAE,OAAO,yBAAA,0BAAA,eAAgB,SAAS,EAAE,eAAe;gBAC9E,IAAyC,yBAAA,IAAI,CAAC,gBAAgB,CAAC,IAAvD,eAAiC,uBAAjC,cAAc,iBAAmB,uBAAnB;gBACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,eAAe;YACpD;;;YAEA,KAAA;mBAAA,SAAA,IAAI,CAAS,EAAb;gBAAe,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,SAAH,UAAA,OAAA,IAAA,OAAA,KAAc,GAAd,OAAA,GAAA,OAAA,MAAA,OAAA;oBAAG,OAAH,OAAA,KAAA,SAAA,CAAA,KAAc;gBAAX;gBAChB,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,EAAE,QAAQ,eAAe;gBACpD,IAAuC,yBAAA,IAAI,CAAC,gBAAgB,CAAC,IAAvD,eAAiC,uBAAjC,cAAc,iBAAmB,uBAAnB;gBACpB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,KAAK,EAAG;oBACzC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,eAAe,GAAG,MAAM,CAAC,EAAE;oBACvD,kBAAkB;oBAClB,IAAI,kBAAkB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,EAAE;wBACxD,gBAAgB;wBAChB,iBAAiB;oBAClB,CAAA;oBACD,IAAI,eAAe,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAM;gBAChD;YACH;;;YAEA,KAAA;mBAAA,SAAA,WAAW,KAAa,EAAxB;gBACE,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;YAC7B;;;YAEA,KAAA;mBAAA,SAAA,aAAa,CAAS,EAAtB;gBACE,IAAyC,yBAAA,IAAI,CAAC,gBAAgB,CAAC,IAAvD,eAAiC,uBAAjC,cAAc,iBAAmB,uBAAnB;gBACtB,OAAO;oBAAE,SAAU,0EAAG,IAAI,CAAC,QAAQ,CAAC,aAAa;oBAAG,gBAAA;gBAAc;YACpE;;;YAEA,KAAA;mBAAA,SAAA,iBAAA;gBACE,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAC;2BAAO,0EAAG;;YACtC;;;YAEA;;;KAGG,GACH,KAAA;mBAAA,SAAA,YAAY,CAAS,EAArB;gBACE,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,eAAe;gBAEvD,IAAI,MAAM,GAAG,OAAO;gBAEpB,IAAyC,yBAAA,IAAI,CAAC,gBAAgB,CAAC,IAAvD,eAAiC,uBAAjC,cAAc,iBAAmB,uBAAnB;gBACtB,IAAI,mBAAmB,GACrB,8CAA8C;gBAC9C,OAAO;gBAGT,IAAM,UAAU,IAAI,CAAC,QAAQ,CAAC,aAAa;gBAC3C,IAAM,QAAQ,QAAQ,KAAK,CAAC;gBAC5B,IAAM,QAAQ,QAAQ,KAAK,CAAC,GAAG;gBAC/B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc,GAAG,OAAO;gBAE7C,OAAO,eAAe;YACxB;;;YAEA,KAAA;mBAAA,SAAA,WAAW,CAAS,EAApB;gBACE,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,eAAe;gBAEvD,IAAI,MAAM,IAAI,CAAC,IAAI,GAAG,GAAG,OAAO,IAAI,CAAC,IAAI,GAAG;gBAE5C,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK;YACnC;;;YAEA;;;KAGG,GACH,KAAA;mBAAA,SAAA,QAAQ,CAAS,EAAjB;gBACE,IAAI,CAAC,UAAU,CAAC;gBAChB,OAAO,IAAI,CAAC,WAAW,CAAC;YAC1B;;;YAEU,KAAA;mBAAA,SAAA,MAAM,CAAS,EAAf;gBACR,IAAI,KAAK,KAAK,KAAK,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,eAAe;gBAExD,IAAyC,yBAAA,IAAI,CAAC,gBAAgB,CAAC,IAAvD,eAAiC,uBAAjC,cAAc,iBAAmB,uBAAnB;gBACtB,IAAI,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC;gBAE5C,OAAO;YACT;;;YAEU,KAAA;mBAAA,SAAA,MAAM,EAAU,EAAE,EAAU,EAA5B;gBACR,IAAI,KAAK,IAAI;oBACX,IAAuC,oFAAA,IAAI,CAAC,KAAK,CAAC,IAAI,SAA/C,gBAAgC,gBAAjB,gBAAiB;oBACvC,OAAO;wBAAC;wBAAe;qBAAc;gBACtC,CAAA;gBAED,IAAI,KAAK,KAAK,MAAM,IAAI,CAAC,IAAI,EAAE,OAAO;oBAAC;oBAAI;iBAAG;gBAE9C,IAAM,YAAY,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,IAAI;gBACvD,IAAM,YAAY,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,IAAI;gBAEvD,IAAwC,yBAAA,IAAI,CAAC,gBAAgB,CAAC,YAAtD,AAAc,iBAAkB,uBAAhC;gBACR,IAAwC,0BAAA,IAAI,CAAC,gBAAgB,CAAC,YAAtD,AAAc,iBAAkB,wBAAhC;gBAER,IAAK,IAAI,IAAI,GAAG,IAAI,iBAAgB,gBAAe,KAAK,EACtD,IAAI,CAAC,YAAY,CAAC,iBAAgB;gBAGpC,OAAO;oBAAC,KAAK,IAAI,KAAK,cAAa;oBAAE,MAAM,IAAI,CAAC,IAAI,GAAG,KAAK,cAAa;iBAAC;YAC5E;;;YAcA,KAAA;mBAAA,SAAA,KAAK,EAAU,EAAE,EAAW,EAA5B;gBACE,OAAO,OAAO,OAAO,cAAc,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG;YACxE;;;YAEA;;;;KAIG,GACH,KAAA;mBAAA,SAAA,aAAa,YAAoB,EAAjC;oBAME;gBALA,IAAI,gBAAgB,KAAK,gBAAgB,IAAI,CAAC,WAAW,EAAE,OAAO;gBAElE,IAAM,QAAQ,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;gBAC7C,IAAM,QAAQ,IAAI,CAAC,QAAQ,CAAC,aAAa;gBACzC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc;gBACnC,CAAA,SAAA,OAAM,IAAI,CAAV,MAAA,QAAW,0EAAG;gBAEd,OAAO,eAAe;YACxB;;;YAEA,KAAA;mBAAA,SAAA,OAAO,IAAY,EAAnB;gBACE,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE;oBACpB,IAAM,OAAO,OAAO,IAAI,CAAC,IAAI;oBAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,IAAI,MAAM,MAAM,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,oBAAoB;oBAEvD,IAAI,CAAC,KAAK,GAAG;gBACd,OAAM,IAAI,OAAO,KAAK,OAAO,IAAI,CAAC,IAAI,EAAE;oBACvC,IAAI,CAAC,WAAW,CAAC;oBACjB,IAAM,AAAE,eAAiB,IAAI,CAAC,gBAAgB,CAAC,MAAvC;oBACR,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;oBACrB,IAAI,CAAC,KAAK,GAAG;gBACd,CAAA;YACH;;;WA5LmB;;;;ANSrB,CAAA,GAAA,sBAAE,AAAF,EAAG,0BAA0B;AAE7B,IAAM,+CACJ;AAEF,IAAM,mDAA6B;AACnC,IAAM,kCAAY;AAClB,IAAM,oCAAc;AAEpB,IAAM,iDAA+C;AACrD,IAAM,wCAAkB;IACtB,QAAQ;IACR,aAAa;IACb,OAAO;IACP,YAAY;IACZ,SAAS;IACT,cAAc;IACd,SAAS;AACV;AACD,IAAM,sCAA+D;IACnE,QAAQ;IACR,QAAQ;IACR,YAAY;IACZ,aAAa;IACb,YAAY;QACV,OAAO;QACP,MAAM;QACN,OAAO;QACP,QAAQ;IACT;IACD,UAAU;QACR,QAAQ;QACR,aAAa;QACb,OAAO;QACP,YAAY;QACZ,SAAS;QACT,cAAc;QACd,SAAS;IACV;IACD,YAAY;QACV,OAAO;QACP,MAAM;IACP;IACD,oBAAoB;QAClB,QAAQ;QACR,aAAa;QACb,OAAO;QACP,YAAY;QACZ,SAAS;QACT,cAAc;QACd,SAAS;IACV;AACF;AAED,SAAS,8CAAwB,WAAmB,EAAE,WAAmB,EAAzE;IACE,CAAA,GAAA,oBAAM,AAAN,EAAO,cAAc;IACrB,IAAM,SAAS,KAAK,GAAG,CAAC,GAAG,cAAc;IACzC,IAAM,SAAS,KAAK,GAAG,CAAC,cAAc,kDAA4B;IAClE,IAAM,UAAU,KAAK,GAAG,CAAC,GAAG,SAAS,SAAS;IAC9C,IAAM,OAAO,IAAI,MAAM,SAAS,IAAI,CAAC,GAAG,GAAG,CAAC,SAAC,GAAG;eAAM,SAAS;;IAC/D,QAAQ,GAAG,CAAC;IACZ,OAAO;AACT;AAEA,IAAM,oCAAc;AAEpB,IAAM,qCAAe;AACrB,IAAM,sCAAgB;AAItB,IAAM,4CAA8C,CAAA;AAWtC,IAAA,AAAO,yDAqhBrB,AArhBc;;aAAO,WAgEjB,OAAgB;YAChB,UAAA,iEAAsC,CAAA,CAAE;qFAjEvB;QACA,4EAAA,YAAA,KAAA;QAET,4EAAA,YAAW,IAAI,CAAC,WAAW;QAE3B,4EAAA,WAAA,KAAA;QAEA,4EAAA,QAAA,KAAA;QAEA,4EAAA,YAAA,KAAA;QAEA,4EAAA,UAAA,KAAA;QAEA,4EAAA,WAAA,KAAA;QAEA,4EAAA,YAAA,KAAA;QAEA,4EAAA,YAAA,KAAA;QAEA,4EAAA,YAAA,KAAA;QAEA,4EAAA,aAAA,KAAA;QAEA,4EAAA,SAAA,KAAA;QAEA,4EAAA,QAAA,KAAA;QAEA,4EAAA,cAAA,KAAA;QAEA,4EAAA,sBAAA,KAAA;QAEA,4EAAA,eAAA,KAAA;QAEA,4EAAA,eAAA,KAAA;QAEA,4EAAA,oBAAA,KAAA;QAEA,4EAAA,oBAAA,KAAA;QAEA,4EAAA,qBAAA,KAAA;QAEA,4EAAA,mBAAA,KAAA;QAEA,4EAAA,YAAA,KAAA;QAEA,4EAAA,WAAA,KAAA;QAEA,4EAAA,YAAA,KAAA;QAEA,4EAAA,mBAAA,KAAA;QAEA,4EAAA,aAAA,KAAA;QAEA,4EAAA,qBAAA,KAAA;QAEA,4EAAA,gBAAA,KAAA;QAEA,4EAAA,aAAA,KAAA;QAEA,4EAAA,SAAA,KAAA;QAEA,4EAAA,SAAA,KAAA;QAMR,QAAQ,GAAG,CAAC;QACZ,IAAI,CAAC,QAAQ,GAAG,wEAAK,2CAAmB;QAExC,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA,GAAA,wCAAA,EAAS,IAAI,CAAC,QAAQ,EAAE;mBAAM;;QAClD,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,gBAAgB,GAAG,IAAI;QAC5B,IAAI,CAAC,iBAAiB,GAAG,IAAI;QAC7B,IAAI,CAAC,eAAe,GAAG,IAAI;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI;QACnB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,gBAAgB,GAAG,8CACtB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,WAAW;QAElB,QAAQ,GAAG,CAAC;QAEZ,IAAM,SAAS,SAAS,aAAa,CAAC;QACtC,OAAO,KAAK,GAAG;QACf,OAAO,MAAM,GAAG;QAChB,IAAM,UAAU,OAAO,UAAU,CAAC;QAClC,CAAA,GAAA,oBAAA,EAAO,YAAY,IAAI;QAEvB,IAAM,OAAO,SAAS,aAAa,CAAC;QACpC,KAAK,YAAY,CAAC,gBAAgB,SAAS,8BAA8B;QACzE,KAAK,SAAS,CAAC,GAAG,CAAC,CAAA,GAAA,yDAAO,OAAP,EAAQ,IAAI;QAC/B,KAAK,gBAAgB,CAAC,eAAe,IAAI,CAAC,QAAQ,CAAC,UAAU;QAC7D,KAAK,gBAAgB,CAAC,aAAa,IAAI,CAAC,QAAQ,CAAC,aAAa;QAC9D,KAAK,gBAAgB,CAAC,iBAAiB,IAAI,CAAC,QAAQ,CAAC,aAAa;QAClE,KAAK,gBAAgB,CAAC,eAAe,SAAC;mBAAU,MAAM,cAAc;;QACpE,KAAK,WAAW,CAAC;QAEjB,MAAO,QAAQ,UAAU,CAAE,QAAQ,UAAU,CAAC,MAAM;QACpD,QAAQ,WAAW,CAAC;QAEpB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,OAAO,GAAG;QAEf,IAAI,CAAC,QAAQ,GAAG,IAAI;QAEpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA,GAAA,8BAAU,AAAV,EAAW;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,iBAAU,GAAG,aAAa;QAE1C,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,SAAS,GAAG,EAAE;QACnB,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,CAAC,KAAK,GAAG;QAEb,IAAI,CAAC,UAAU;;uEA9HE;;YA0InB,KAAA;mBAAA,SAAA,OAAA;;gBACE,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG;oBACpB,IAAM,AAAE,aAAe,IAAI,CAAnB;oBACR,IAAI,CAAC,KAAK,GAAG,WAAW,WAAxB;wBACE,MAAK,KAAK,GAAG,YAAY;mCAAM,MAAK,QAAQ;2BAAI;oBAClD,GAAG;gBACJ,CAAA;YACH;;;YAEA,KAAA;mBAAA,SAAA,QAAA;gBACE,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG;oBACpB,aAAa,IAAI,CAAC,KAAK;oBACvB,cAAc,IAAI,CAAC,KAAK;oBACxB,IAAI,CAAC,KAAK,GAAG;oBACb,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;wBACvB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE;wBACrC,IAAI,CAAC,KAAK,GAAG,IAAI;oBAClB,CAAA;gBACF,CAAA;YACH;;;YAEA,KAAA;mBAAA,SAAA,YAAA;gBACE,OAAO,IAAI,CAAC,KAAK,KAAK;YACxB;;;YAEU,KAAA;mBAAA,SAAA,WAAA;gBACR,IAAM,AAAE,QAAU,IAAI,CAAd;gBAER,IAAoC,8BAAA,IAAI,CAAC,QAAQ,CAAC,YAAY,CAC5D,IAAI,CAAC,QAAQ,GADP,UAA4B,4BAA5B,SAAS,iBAAmB,4BAAnB;gBAGjB,IAAM,OAAO,OAAO,CAAC,eAAe;gBACpC,CAAA,GAAA,oBAAA,EAAO,OAAO,SAAS;gBAEvB,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,SAAS,IAAI;oBACtC,0DAA0D;oBAC1D,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE;oBACrC,IAAI,CAAC,KAAK,GAAG,IAAI;gBAClB,CAAA;gBAED,IAAI,SAAS,IAAI;oBACf,IAAM,YAAY,IAAI,CAAC,iBAAiB,CAAC;oBAEzC,IAAM,SACJ,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,mBAAmB,KAAK,CAAC,IAAI,CAAC,iBAAiB;oBACxE,IAAM,UACJ,mBAAmB,QAAQ,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,iBAAiB;wBAErD,aAAA;oBAAb,IAAI,CAAC,KAAK,GAAG,CAAA,OAAA,CAAA,cAAA,IAAI,CAAC,KAAK,cAAV,yBAAA,cAAc,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,cAAlC,kBAAA,OAAsC,IAAI,CAAC,WAAW,EAAE;oBAErE,IAAM,eAAe,AAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,kBAAkB,GAAI;oBAEnE,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe,EACjC,SAAS;oBACT,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;yBAEzB,8BAA8B;oBAC9B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,iBAAiB,CAAC,WAAW,eAAe;oBAEnE,IAAI,SAAS;wBACX,uCAAuC;wBACvC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE;wBACrC,IAAI,CAAC,KAAK,GAAG,IAAI;oBAClB,CAAA;gBACF,CAAA;gBAED,IAAI,CAAC,UAAU;gBAEf,IAAI,CAAC,QAAQ,IAAI;gBACjB,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;oBACxC,IAAI,CAAC,QAAQ,GAAG;oBAChB,IAAI,CAAC,SAAS,IAAI;oBAClB,IAAI,IAAI,CAAC,gBAAgB,EAAE,MAAM,UAAU;gBAC5C,CAAA;YACH;;;YAEA,KAAA;mBAAA,SAAA,cAAA;gBACE,OAAO,IAAI,oBAAa,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI;YAC9D;;;YAEA,KAAA;mBAAA,SAAA,oBAAoB,KAAmB,EAAE,OAAe,EAAxD;;gBACE,MAAM,cAAc,CAAC,oBAAa;gBAClC,IAAM,kBAAkB,iBAAU,MAAM,QAAQ,CAAC,OAAO,EAAE,SAAS;gBACnE,IAAM,eAAe,UAAU;gBAC/B,WAAW;2BAAM,MAAK,SAAS,CAAC,IAAI,CAAC;mBAAQ,eAAe;YAC9D;;;YAEA,KAAA;mBAAA,SAAA,kBAAkB,IAAY,EAA9B;gBACE,IAAM,cAAc,oCAAc,IAAI;gBACtC,IAAM,WAAW,IAAI,CAAC,KAAK,CAAC,eAAe,CACzC,aACA,IAAI,CAAC,gBAAgB,EACrB;gBAEF,IAAM,WAAW,mDAA6B;gBAC9C,IAAM,YAAY,sBAAe,UAAU,QAAQ,WAAW;gBAC9D,OAAO;YACT;;;YAEM,KAAA;mBAAN,SAAM;;uBAAN,yEAAA,WAAA;wBACU;;;;gCAAA,cAAA;gCACR;;oCAAM,MAAM,UAAU;;;gCAAtB;gCACA,QAAQ,GAAG,CAAC;gCAEZ,MAAK,IAAI;;;;;;gBACX;;;;YAEA,KAAA;mBAAA,SAAA,aAAA;gBACE,OAAO,wEAAK,IAAI,CAAC,QAAQ;YAC3B;;;YAEA,KAAA;mBAAA,SAAA,aAAa,CAA6B,EAA1C;gBACE,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC/B;;;YAEU,KAAA;mBAAA,SAAA,cAAA;gBACR,OAAO;oBACL,YAAY,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI;oBACrC,eAAe,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI;oBAC3C,eAAe,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI;gBAC5C;YACH;;;YAEA,KAAA;mBAAA,SAAA,mBAAmB,IAAY,EAAE,IAAY,EAA7C;gBACE,IAAM,QAAQ,KAAK,KAAK,CAAC,OAAO,IAAI,CAAC,QAAQ;gBAC7C,IAAM,QAAQ,KAAK,KAAK,CAAC,OAAO;gBAChC,OAAO;oBAAE,OAAA;oBAAO,OAAA;gBAAK;YACvB;;;YAEU,KAAA;mBAAA,SAAA,WAAW,EAAgB,EAA3B;gBACR,IAAI,CAAC,aAAa,CAAC;gBACnB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe,IAAI,CAAC,QAAQ,CAAC,aAAa;gBACrE,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,SAAS;gBAExC,IAAuB,8BAAA,CAAA,GAAA,yCAAA,EAA2B,IAAI,IAAI,CAAC,IAAI,GAAvD,OAAe,4BAAf,MAAM,OAAS,4BAAT;gBACd,IAAyB,2BAAA,IAAI,CAAC,kBAAkB,CAAC,MAAM,OAA/C,QAAiB,yBAAjB,OAAO,QAAU,yBAAV;gBACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE;oBAAE,OAAA;oBAAO,OAAA;gBAAK;gBAE9C,IAAM,AAAE,WAAa,IAAI,CAAjB;gBACR,SAAS,OAAO,CAAC;gBACjB,SAAS,GAAG,CAAC,OAAO;gBAEpB,IAAI,CAAC,UAAU;YACjB;;;YAEU,KAAA;mBAAA,SAAA,yBAAA;gBACR,IAAI,CAAC,gBAAgB,GAAG,8CACtB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,WAAW;YAEpB;;;YAEU,KAAA;mBAAA,SAAA,cAAc,EAAgB,EAA9B;gBACR,IAAI,GAAG,OAAO,KAAK,GAAG;gBAEtB,IAAM,KAAK,GAAG,SAAS;gBACvB,IAAuB,8BAAA,CAAA,GAAA,yCAAA,EAA2B,IAAI,IAAI,CAAC,IAAI,GAAvD,OAAe,4BAAf,MAAM,OAAS,4BAAT;gBACd,IAAM,cAAc,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;gBACtC,CAAA,GAAA,oBAAA,EAAO,OAAO,gBAAgB;gBAC9B,IAAQ,AAAO,YAAgC,YAAvC,OAAkB,AAAO,YAAc,YAArB;gBAE1B,IAAyB,2BAAA,IAAI,CAAC,kBAAkB,CAAC,MAAM,OAA/C,QAAiB,yBAAjB,OAAO,QAAU,yBAAV;gBACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI;oBAAE,OAAA;oBAAO,OAAA;gBAAK;gBAEpC,IAAM,AAAE,WAAa,IAAI,CAAjB;gBACR,IAAI,cAAc,OAChB,cAAc;gBACd;oBAAA,IAAI,cAAc,OAAO;wBACvB,mBAAmB;wBACnB,IAAI,QAAQ,KAAK,SAAS,mCAAa;4BACrC,iBAAiB;4BACjB,SAAS,OAAO,CAAC;4BACjB,SAAS,GAAG,CAAC,OAAO;wBACrB,OACC,iBAAiB;wBACjB,SAAS,GAAG,CAAC,OAAO;wBAEtB,IAAI,CAAC,UAAU;oBAChB,CAAA;gBAAA,OACI;oBACL,2DAA2D;oBAC3D,IAA6C,2FAAA,IAAI,CAAC,YAAY,CAC5D,aACA;wBAAE,OAAA;wBAAO,OAAA;oBAAK,QAFT,uBAAsC,uBAAhB,eAAgB;oBAI7C,QAAQ,GAAG,CAAC,WAAW,sBAAsB,OAAO;oBACpD,IACE,cAAc,MACd,UAAU,MACV,yBAAyB;wBAEzB,IAAI,YAAY,OACd,SAAS,UAAU,CAAC;6BAEpB,SAAS,WAAW,CAAC;qBAExB;oBACD,IAAI,CAAC,UAAU;gBAChB,CAAA;YACH;;;YAEU,KAAA;mBAAA,SAAA,aAAa,KAAe,EAAE,MAAgB,EAA9C;gBACR,IAAI,OAAO,KAAK,GAAG,MAAM,KAAK,EAAE;oBAC9B,IAAgD,2FAAA,IAAI,CAAC,YAAY,CAC/D,QACA,YAFK,qBAAyC,uBAArB,oBAAqB;oBAIhD,OAAO;wBAAC;wBAAmB;qBAAmB;gBAC/C,CAAA;gBAED,IAAQ,AAAO,KAAkB,MAAzB,OAAW,AAAO,KAAO,MAAd;gBACnB,IAAQ,AAAO,KAAkB,OAAzB,OAAW,AAAO,KAAO,OAAd;gBAEnB,IAAM,QAAQ,AAAC,CAAA,KAAK,EAAA,IAAO,CAAA,KAAK,EAAA;gBAEhC,IAAM,AAAE,WAAa,IAAI,CAAjB;gBACR,IAAgD,uFAAA,SAAS,IAAI,CAAC,IAAI,SAA3D,qBAAyC,mBAAtB,sBAAsB;gBAEhD,IAAM,YAAY,KAAK,GAAG,CAAC,SAAS,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,IAAI;gBAC3D,IAAM,YAAY,KAAK,GAAG,CAAC,SAAS,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,IAAI;gBAC3D,IAAK,IAAI,IAAI,WAAW,KAAK,WAAW,KAAK,EAAG;oBAC9C,IAAM,IAAI,KAAK,KAAK,CAAC,KAAK,QAAS,CAAA,IAAI,EAAA;oBACvC,IAAI,IAAI,KAAK,KAAK,mCAAa;wBAC7B,0EAA0E;wBAC1E,SAAS,OAAO,CAAC;wBACjB,SAAS,GAAG,CAAC,GAAG;oBACjB,OACC,SAAS,GAAG,CAAC,GAAG;gBAEnB;gBAED,OAAO;oBAAC;oBAAmB;iBAAmB;YAChD;;;YAEU,KAAA;mBAAA,SAAA,cAAc,EAAgB,EAA9B;gBACR,IAAM,KAAK,GAAG,SAAS;gBAEvB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAErB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,GACzB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,IAAI,CAAC,QAAQ,CAAC,aAAa;YAC5E;;;YAEU,KAAA;mBAAA,SAAA,aAAA;gBACR,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,GAAG,oCAAc;gBAC3C,IAAI,IAAI,CAAC,OAAO,EACd,IAAI,CAAC,QAAQ;gBAEf,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,IAAI,CAAC,UAAU;oBACf,IAAI,CAAC,SAAS;gBACf,CAAA;gBAED,IAAI,CAAC,aAAa;YACpB;;;YAEU,KAAA;mBAAA,SAAA,gBAAA;gBACR,IAAM,AAAE,WAAa,IAAI,CAAjB;gBAER,mBAAmB;gBACnB,IAAM,0BAAwD,EAAE;gBAChE,IAAM,QAAQ,qCAAe,SAAS,IAAI;gBAC1C,IAAM,QAAQ,sCAAgB;gBAC9B,IAAI,QAAQ;gBACZ,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,WAAW,EAAE,KAAK,EAAG;oBAChD,IAAM,UAAU,SAAS,UAAU,CAAC;oBACpC,IAAM,gBAA4C,EAAE;oBACpD,CAAA,GAAA,oBAAA,EAAO,OAAO,YAAY;oBAC1B,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,KAAK,EAAG;wBAC1C,IAAM,QAAQ,OAAO,CAAC,EAAE;wBACxB,IAAI,SAAS,GAAG;4BACd,IAAM,IAAI,QAAS,CAAA,MAAM,KAAA;4BACzB,IAAM,IAAI,QAAS,CAAA,MAAM,KAAA;4BACzB,cAAc,IAAI,CAAC;gCAAE,GAAA;gCAAG,GAAA;4BAAC;wBAC1B,CAAA;wBACD,SAAS;oBACV;oBACD,wBAAwB,IAAI,CAAC;gBAC9B;gBAED,IAAM,aAAa,KAAK,GAAG,CACzB,sCAAgB,mCAChB,qCAAe,SAAS,IAAI;gBAG9B,IACE,QAAA,IAAI,EADE,UACN,MADM,SAAS,kBACf,MADe,iBAAiB,WAChC,MADgC,UAAU,oBAC1C,MAD0C,mBAAmB,YAC7D,MAD6D;gBAG/D,QAAQ,IAAI;gBACZ,IAAM,YAAY,aAAa,kBAAkB;gBACjD,IAAI,YAAY,GAAG;oBACjB,QAAQ,SAAS,GAAG;oBACpB,wBAAwB,OAAO,CAAC,SAAC;+BAC/B,cAAc,OAAO,CAAC,gBADxB;gCAC2B,UAAA,GAAG,UAAA;4BAC1B,QAAQ,SAAS;4BACjB,QAAQ,OAAO,CAAC,GAAG,GAAG,WAAW,WAAW,GAAG,GAAG,IAAI,KAAK,EAAE;4BAC7D,QAAQ,SAAS;4BACjB,QAAQ,IAAI;wBACd;;gBAEH,CAAA;gBAED,IAAM,YAAY,aAAa;gBAC/B,IAAI,YAAY,GAAG;oBACjB,QAAQ,SAAS;oBACjB,QAAQ,WAAW,GAAG;oBACtB,QAAQ,SAAS,GAAG;oBACpB,QAAQ,OAAO,GAAG;oBAClB,QAAQ,QAAQ,GAAG;oBACnB,wBAAwB,OAAO,CAAC,SAAC,eAAjC;wBACE,IAAI,cAAc,MAAM,KAAK,GAAG;4BAC9B,IAAmB,uFAAA,qCAAA,mBAAV,oBAAA,GAAG,oBAAA;4BACZ,QAAQ,MAAM,CAAC,GAAG;4BAClB,QAAQ,MAAM,CAAC,GAAG;wBACnB,OAAM,IAAI,cAAc,MAAM,KAAK,GAAG;4BACrC,IAA6C,wFAAA,sCAAA,oBAApC,AAAG,sBAAH,GAAO,AAAG,sBAAH,sBAA6B,oBAAlB,AAAG,sBAAH,GAAO,AAAG,sBAAH;4BAClC,QAAQ,MAAM,CAAC,IAAI;4BACnB,QAAQ,MAAM,CAAC,IAAI;wBACpB,OAAM,IAAI,cAAc,MAAM,IAAI,GAAG;4BACpC,IAAM,SAAS,CAAA,GAAA,yCAAA,EAAe,eAAe;4BAC7C,IAAM,aAAa,OAAO,KAAK;4BAC/B,CAAA,GAAA,oBAAA,EAAO,OAAO,eAAe;4BAE7B,QAAQ,MAAM,CAAC,WAAW,CAAC,EAAE,WAAW,CAAC;4BACzC,OAAO,OAAO,CAAC;oCAAG,UAAA,GAAG,UAAA;uCAAQ,QAAQ,MAAM,CAAC,GAAG;;wBAChD,CAAA;oBACH;oBACA,QAAQ,MAAM;oBACd,QAAQ,SAAS;gBAClB,CAAA;gBACD,QAAQ,OAAO;YACjB;;;YAEU,KAAA;mBAAA,SAAA,YAAA;gBACR,IAA8B,QAAA,IAAI,EAA1B,UAAsB,MAAtB,SAAS,WAAa,MAAb;gBAEjB,QAAQ,IAAI;gBACZ,QAAQ,SAAS;gBACjB,QAAQ,WAAW,GAAG;gBACtB,IAAM,QAAQ,qCAAe,SAAS,IAAI;gBAC1C,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAAI,EAAE,KAAK,EAAG;oBACzC,IAAM,IAAI,QAAQ;oBAClB,QAAQ,MAAM,CAAC,GAAG;oBAClB,QAAQ,MAAM,CAAC,GAAG;gBACnB;gBACD,IAAM,QAAQ,sCAAgB;gBAC9B,IAAK,IAAI,KAAI,GAAG,KAAI,mCAAa,MAAK,EAAG;oBACvC,IAAM,IAAI,QAAQ;oBAClB,QAAQ,MAAM,CAAC,GAAG;oBAClB,QAAQ,MAAM,CAAC,oCAAc;gBAC9B;gBACD,QAAQ,MAAM;gBACd,QAAQ,SAAS;gBACjB,QAAQ,OAAO;YACjB;;;YAEU,KAAA;mBAAA,SAAA,aAAA;gBACR,IAA8B,QAAA,IAAI,EAA1B,UAAsB,MAAtB,SAAS,WAAa,MAAb;gBAEjB,QAAQ,IAAI;gBACZ,QAAQ,SAAS;gBACjB,QAAQ,SAAS,GAAG;gBACpB,IAAM,QAAQ,qCAAe,SAAS,IAAI;gBAC1C,IAAM,QAAQ,sCAAgB;gBAC9B,IAAI,QAAQ;gBACZ,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAG;oBACrD,IAAM,UAAU,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;oBACzC,CAAA,GAAA,oBAAA,EAAO,OAAO,YAAY;oBAC1B,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,KAAK,EAAG;wBAC1C,IAAM,QAAQ,OAAO,CAAC,EAAE;wBACxB,IAAI,SAAS,GAAG;4BACd,IAAM,IAAI,QAAQ;4BAClB,IAAM,IAAI,QAAQ;4BAClB,QAAQ,IAAI,CAAC,GAAG,GAAG,OAAO;wBAC3B,CAAA;wBACD,SAAS;oBACV;gBACF;gBACD,QAAQ,IAAI;gBACZ,QAAQ,SAAS;gBACjB,QAAQ,OAAO;YACjB;;;YAEU,KAAA;mBAAA,SAAA,WAAA;gBACR,IAAM,AAAE,UAAY,IAAI,CAAhB;gBAER,QAAQ,IAAI;gBACZ,QAAQ,SAAS,GAAG;gBACpB,IAAM,QAAQ,qCAAe,IAAI,CAAC,QAAQ;gBAC1C,IAAM,IAAI,QAAQ,IAAI,CAAC,QAAQ;gBAC/B,QAAQ,QAAQ,CAAC,GAAG,GAAG,OAAO;gBAC9B,QAAQ,OAAO;YACjB;;;;YAjZa,KAAA;mBAAb,SAAa,OACX,OAAgB;oBAChB,UAAA,iEAAsC,CAAA,CAAE;uBAF1C,yEAAA,WAAA;wBAIQ;;;;gCAAA,aAAa,IArIF,WAqIiB,SAAS;gCAC3C;;oCAAM,WAAW,IAAI;;;gCAArB;gCACA;;oCAAO;;;;gBACT;;;;WAxImB;;;AF3FrB;;IAIA,2CAAe,CAAA,GAAA,wCAAA","sources":["src/lib/ts/index.ts","index.ts","src/lib/ts/synth-genie.ts","synth-genie.ts","src/lib/scss/synth-genie.module.scss","src/lib/ts/util.ts","util.ts","src/lib/ts/segments.ts","<<jsx-config-pragma.js>>","segments.ts"],"sourcesContent":["import SynthGenie from './synth-genie';\n\nexport * from './synth-genie';\n\nexport default SynthGenie;\n",null,"/* eslint-disable no-console */\nimport { tf, PianoGenie } from '@magenta/music';\nimport * as Tone from 'tone';\nimport { strict as assert } from 'assert';\n\nimport classes from '../scss/synth-genie.module.scss';\nimport { getRelativePointerPosition, getCurvePoints } from './util';\nimport Segments from './segments';\n\ntf.disableDeprecationWarnings();\n\nconst PIANO_GENIE_CHECKPOINT =\n  'https://storage.googleapis.com/magentadata/js/checkpoints/piano_genie/model/epiano/stp_iq_auto_contour_dt_166006';\n\nconst LOWEST_PIANO_KEY_MIDI_NOTE = 21;\nconst NUM_BEATS = 16;\nconst NUM_BUTTONS = 8;\n\nconst exponentialEnvelopeCurve: Tone.EnvelopeCurve = 'exponential';\nconst envelopeOptions = {\n  attack: 0.01,\n  attackCurve: exponentialEnvelopeCurve,\n  decay: 0.01,\n  decayCurve: exponentialEnvelopeCurve,\n  release: 0.5,\n  releaseCurve: exponentialEnvelopeCurve,\n  sustain: 0.9,\n};\nconst SYNTH_OPTIONS: ConstructorParameters<typeof Tone.AMSynth>[0] = {\n  volume: 0,\n  detune: 0,\n  portamento: 0,\n  harmonicity: 2.5,\n  oscillator: {\n    phase: 0,\n    type: 'fatsawtooth',\n    count: 3,\n    spread: 20,\n  },\n  envelope: {\n    attack: 0.1,\n    attackCurve: 'linear',\n    decay: 0.2,\n    decayCurve: 'exponential',\n    release: 0.3,\n    releaseCurve: 'exponential',\n    sustain: 0.2,\n  },\n  modulation: {\n    phase: 0,\n    type: 'square',\n  },\n  modulationEnvelope: {\n    attack: 0.5,\n    attackCurve: 'linear',\n    decay: 0.01,\n    decayCurve: 'exponential',\n    release: 0.5,\n    releaseCurve: 'exponential',\n    sustain: 1,\n  },\n};\n\nfunction computeAllowedPianoKeys(minMidiNote: number, maxMidiNote: number) {\n  assert(minMidiNote < maxMidiNote);\n  const keyMin = Math.max(0, minMidiNote - LOWEST_PIANO_KEY_MIDI_NOTE);\n  const maxKey = Math.min(maxMidiNote - LOWEST_PIANO_KEY_MIDI_NOTE, 88 - 1);\n  const numKeys = Math.max(0, maxKey - keyMin + 1);\n  const keys = new Array(numKeys).fill(0).map((_, i) => keyMin + i);\n  console.log(keys);\n  return keys;\n}\n\nconst TEMPERATURE = 0.25;\n\nconst CANVAS_WIDTH = 512;\nconst CANVAS_HEIGHT = 256;\n\nexport type SynthGenieOptions = Record<string, unknown>;\n\nconst defaultOptions: Readonly<SynthGenieOptions> = {};\n\ntype RenderingContext2D =\n  | CanvasRenderingContext2D\n  | OffscreenCanvasRenderingContext2D;\n\ntype CellData = {\n  cellX: number;\n  cellY: number;\n};\n\nexport default class SynthGenie {\n  protected readonly _options: SynthGenieOptions;\n\n  protected handlers = this.getHandlers();\n\n  protected element: Element;\n\n  protected pane: HTMLDivElement;\n\n  protected pointers: Map<number, CellData>;\n\n  protected canvas: HTMLCanvasElement;\n\n  protected context: RenderingContext2D;\n\n  protected segments: Segments<number>;\n\n  protected numNotes: number;\n\n  protected position: number;\n\n  protected loopCount: number;\n\n  protected genie: PianoGenie;\n\n  protected gain: Tone.Gain;\n\n  protected beatLength: number;\n\n  protected relativeNoteLength: number;\n\n  protected minMidiNote: number;\n\n  protected maxMidiNote: number;\n\n  protected allowedPianoKeys: number[];\n\n  protected resetStateOnLoop: boolean;\n\n  protected sustainInSegments: boolean;\n\n  protected slideInSegments: boolean;\n\n  protected showGrid: boolean;\n\n  protected showBar: boolean;\n\n  protected dotColor: string;\n\n  protected relativeDotSize: number;\n\n  protected lineColor: string;\n\n  protected relativeLineWidth: number;\n\n  protected synthOptions: ConstructorParameters<typeof Tone.AMSynth>[0];\n\n  protected synthPool: Tone.AMSynth[];\n\n  protected synth: Tone.AMSynth | null;\n\n  protected timer: ReturnType<typeof setInterval> | 0;\n\n  protected constructor(\n    element: Element,\n    options: Partial<SynthGenieOptions> = {},\n  ) {\n    console.log('Starting');\n    this._options = { ...defaultOptions, ...options };\n\n    this.numNotes = NUM_BEATS;\n    this.segments = new Segments(this.numNotes, () => -1);\n    this.position = 0;\n    this.loopCount = 0;\n    this.resetStateOnLoop = true;\n    this.sustainInSegments = true;\n    this.slideInSegments = true;\n    this.showGrid = true;\n    this.showBar = true;\n    this.beatLength = 250;\n    this.relativeNoteLength = 1.0;\n    this.minMidiNote = 21;\n    this.maxMidiNote = 21 + 88 - 1;\n    this.dotColor = '#2c2c2c';\n    this.relativeDotSize = 0.0;\n    this.lineColor = '#2c2c2c';\n    this.relativeLineWidth = 0.6;\n    this.allowedPianoKeys = computeAllowedPianoKeys(\n      this.minMidiNote,\n      this.maxMidiNote,\n    );\n    console.log('Starting 2');\n\n    const canvas = document.createElement('canvas');\n    canvas.width = CANVAS_WIDTH;\n    canvas.height = CANVAS_HEIGHT;\n    const context = canvas.getContext('2d');\n    assert(context !== null);\n\n    const pane = document.createElement('div');\n    pane.setAttribute('touch-action', 'none'); // for Pointer Events Polyfill\n    pane.classList.add(classes.pane);\n    pane.addEventListener('pointerdown', this.handlers.addPointer);\n    pane.addEventListener('pointerup', this.handlers.removePointer);\n    pane.addEventListener('pointercancel', this.handlers.removePointer);\n    pane.addEventListener('contextmenu', (event) => event.preventDefault());\n    pane.appendChild(canvas);\n\n    while (element.firstChild) element.firstChild.remove();\n    element.appendChild(pane);\n\n    this.pane = pane;\n    this.element = element;\n    this.canvas = canvas;\n    this.context = context;\n\n    this.pointers = new Map();\n\n    this.genie = new PianoGenie(PIANO_GENIE_CHECKPOINT);\n    this.gain = new Tone.Gain(1).toDestination();\n\n    this.synthOptions = SYNTH_OPTIONS;\n    this.synthPool = [];\n    this.synth = null;\n    this.timer = 0;\n\n    this.updateGrid();\n  }\n\n  static async create(\n    element: Element,\n    options: Partial<SynthGenieOptions> = {},\n  ) {\n    const synthGenie = new SynthGenie(element, options);\n    await synthGenie.init();\n    return synthGenie;\n  }\n\n  play() {\n    if (this.timer === 0) {\n      const { beatLength } = this;\n      this.timer = setTimeout(() => {\n        this.timer = setInterval(() => this.playBeat(), beatLength);\n      }, 0);\n    }\n  }\n\n  pause() {\n    if (this.timer !== 0) {\n      clearTimeout(this.timer);\n      clearInterval(this.timer);\n      this.timer = 0;\n      if (this.synth !== null) {\n        this.releaseAndFreeSynth(this.synth, 0);\n        this.synth = null;\n      }\n    }\n  }\n\n  isPlaying() {\n    return this.timer !== 0;\n  }\n\n  protected playBeat() {\n    const { genie } = this;\n\n    const { segment, indexInSegment } = this.segments.getSegmentOf(\n      this.position,\n    );\n    const cell = segment[indexInSegment];\n    assert(typeof cell !== 'undefined');\n\n    if (this.synth !== null && cell === -1) {\n      // note still ringing, but shouldn't (grid values changed)\n      this.releaseAndFreeSynth(this.synth, 0);\n      this.synth = null;\n    }\n\n    if (cell !== -1) {\n      const frequency = this.getGenieFrequency(cell);\n\n      const attack =\n        this.synth === null || indexInSegment === 0 || !this.sustainInSegments;\n      const release =\n        indexInSegment === segment.length - 1 || !this.sustainInSegments;\n\n      this.synth = this.synth ?? this.synthPool.pop() ?? this.createSynth();\n\n      const noteDuration = (this.beatLength * this.relativeNoteLength) / 1000;\n\n      if (attack || !this.slideInSegments) {\n        // attack\n        this.synth.triggerAttack(frequency);\n      } else {\n        // ramp to next note frequency\n        this.synth.frequency.exponentialRampTo(frequency, noteDuration * 0.1);\n      }\n      if (release) {\n        // release note at the end of this cell\n        this.releaseAndFreeSynth(this.synth, noteDuration);\n        this.synth = null;\n      }\n    }\n\n    this.updateGrid();\n\n    this.position += 1;\n    if (this.position === this.segments.size) {\n      this.position = 0;\n      this.loopCount += 1;\n      if (this.resetStateOnLoop) genie.resetState();\n    }\n  }\n\n  createSynth() {\n    return new Tone.AMSynth(this.synthOptions).connect(this.gain);\n  }\n\n  releaseAndFreeSynth(synth: Tone.AMSynth, seconds: number) {\n    synth.triggerRelease(Tone.now() + seconds);\n    const releaseDuration = Tone.Time(synth.envelope.release).toSeconds();\n    const toneDuration = seconds + releaseDuration;\n    setTimeout(() => this.synthPool.push(synth), toneDuration * 1000);\n  }\n\n  getGenieFrequency(cell: number) {\n    const genieButton = NUM_BUTTONS - 1 - cell;\n    const pianoKey = this.genie.nextFromKeyList(\n      genieButton,\n      this.allowedPianoKeys,\n      TEMPERATURE,\n    );\n    const midiNote = LOWEST_PIANO_KEY_MIDI_NOTE + pianoKey;\n    const frequency = Tone.Frequency(midiNote, 'midi').toFrequency();\n    return frequency;\n  }\n\n  async init() {\n    const { genie } = this;\n    await genie.initialize();\n    console.log('🧞‍♀️ ready!');\n\n    this.play();\n  }\n\n  getOptions() {\n    return { ...this._options };\n  }\n\n  applyOptions(o: Partial<SynthGenieOptions>) {\n    Object.assign(this._options, o);\n  }\n\n  protected getHandlers() {\n    return {\n      addPointer: this.addPointer.bind(this),\n      updatePointer: this.updatePointer.bind(this),\n      removePointer: this.removePointer.bind(this),\n    };\n  }\n\n  getCellCoordinates(relX: number, relY: number) {\n    const cellX = Math.floor(relX * this.numNotes);\n    const cellY = Math.floor(relY * NUM_BUTTONS);\n    return { cellX, cellY };\n  }\n\n  protected addPointer(pe: PointerEvent) {\n    this.removePointer(pe);\n    this.pane.addEventListener('pointermove', this.handlers.updatePointer);\n    this.pane.setPointerCapture(pe.pointerId);\n\n    const { relX, relY } = getRelativePointerPosition(pe, this.pane);\n    const { cellX, cellY } = this.getCellCoordinates(relX, relY);\n    this.pointers.set(pe.pointerId, { cellX, cellY });\n\n    const { segments } = this;\n    segments.isolate(cellX);\n    segments.set(cellX, cellY);\n\n    this.updateGrid();\n  }\n\n  protected updateAllowedPianoKeys() {\n    this.allowedPianoKeys = computeAllowedPianoKeys(\n      this.minMidiNote,\n      this.maxMidiNote,\n    );\n  }\n\n  protected updatePointer(pe: PointerEvent) {\n    if (pe.buttons === 0) return;\n\n    const id = pe.pointerId;\n    const { relX, relY } = getRelativePointerPosition(pe, this.pane);\n    const pointerData = this.pointers.get(id);\n    assert(typeof pointerData !== 'undefined');\n    const { cellX: prevCellX, cellY: prevCellY } = pointerData;\n\n    const { cellX, cellY } = this.getCellCoordinates(relX, relY);\n    this.pointers.set(id, { cellX, cellY });\n\n    const { segments } = this;\n    if (prevCellX === cellX) {\n      // same x cell\n      if (prevCellY !== cellY) {\n        // different y cell\n        if (cellY < 0 || cellY >= NUM_BUTTONS) {\n          // out of y range\n          segments.isolate(cellX);\n          segments.set(cellX, -1);\n        } else {\n          // within y range\n          segments.set(cellX, cellY);\n        }\n        this.updateGrid();\n      }\n    } else {\n      // different x cell (possibly with some columns in between)\n      const [previousSegmentIndex, segmentIndex] = this.connectCells(\n        pointerData,\n        { cellX, cellY },\n      );\n      if (\n        prevCellX !== -1 &&\n        cellX !== -1 &&\n        previousSegmentIndex !== segmentIndex\n      ) {\n        if (prevCellX < cellX) {\n          segments.splitAfter(cellX);\n        } else {\n          segments.splitBefore(cellX);\n        }\n      }\n      this.updateGrid();\n    }\n  }\n\n  protected connectCells(first: CellData, second: CellData): [number, number] {\n    if (second.cellX < first.cellX) {\n      const [secondSegmentIndex, firstSegmentIndex] = this.connectCells(\n        second,\n        first,\n      );\n      return [firstSegmentIndex, secondSegmentIndex];\n    }\n\n    const { cellX: x0, cellY: y0 } = first;\n    const { cellX: x1, cellY: y1 } = second;\n\n    const slope = (y1 - y0) / (x1 - x0);\n\n    const { segments } = this;\n    const [firstSegmentIndex, secondSegmentIndex] = segments.join(x0, x1);\n\n    const clampedX0 = Math.min(segments.size - 1, Math.max(x0, 0));\n    const clampedX1 = Math.min(segments.size - 1, Math.max(x1, 0));\n    for (let x = clampedX0; x <= clampedX1; x += 1) {\n      const y = Math.floor(y0 + slope * (x - x0));\n      if (y < 0 || y >= NUM_BUTTONS) {\n        // make it possible to disable columns by dragging them out of the y range\n        segments.isolate(x);\n        segments.set(x, -1);\n      } else {\n        segments.set(x, y);\n      }\n    }\n\n    return [firstSegmentIndex, secondSegmentIndex];\n  }\n\n  protected removePointer(pe: PointerEvent) {\n    const id = pe.pointerId;\n\n    this.pointers.delete(id);\n\n    if (this.pointers.size === 0)\n      this.pane.removeEventListener('pointermove', this.handlers.updatePointer);\n  }\n\n  protected updateGrid() {\n    this.context.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    if (this.showBar) {\n      this.paintBar();\n    }\n    if (this.showGrid) {\n      this.paintCells();\n      this.paintGrid();\n    }\n\n    this.paintSegments();\n  }\n\n  protected paintSegments() {\n    const { segments } = this;\n\n    // compute segments\n    const controlPointsPerSegment: { x: number; y: number }[][] = [];\n    const stepX = CANVAS_WIDTH / segments.size;\n    const stepY = CANVAS_HEIGHT / NUM_BUTTONS;\n    let cellX = 0;\n    for (let i = 0; i < segments.numSegments; i += 1) {\n      const segment = segments.getSegment(i);\n      const controlPoints: { x: number; y: number }[] = [];\n      assert(typeof segment !== 'undefined');\n      for (let j = 0; j < segment.length; j += 1) {\n        const cellY = segment[j];\n        if (cellY >= 0) {\n          const x = stepX * (0.5 + cellX);\n          const y = stepY * (0.5 + cellY);\n          controlPoints.push({ x, y });\n        }\n        cellX += 1;\n      }\n      controlPointsPerSegment.push(controlPoints);\n    }\n\n    const minCellDim = Math.min(\n      CANVAS_HEIGHT / NUM_BUTTONS,\n      CANVAS_WIDTH / segments.size,\n    );\n\n    const { context, relativeDotSize, dotColor, relativeLineWidth, lineColor } =\n      this;\n\n    context.save();\n    const dotRadius = minCellDim * relativeDotSize * 0.5;\n    if (dotRadius > 0) {\n      context.fillStyle = dotColor;\n      controlPointsPerSegment.forEach((controlPoints) =>\n        controlPoints.forEach(({ x, y }) => {\n          context.beginPath();\n          context.ellipse(x, y, dotRadius, dotRadius, 0, 0, 2 * Math.PI);\n          context.closePath();\n          context.fill();\n        }),\n      );\n    }\n\n    const lineWidth = minCellDim * relativeLineWidth;\n    if (lineWidth > 0) {\n      context.beginPath();\n      context.strokeStyle = lineColor;\n      context.lineWidth = lineWidth;\n      context.lineCap = 'round';\n      context.lineJoin = 'round';\n      controlPointsPerSegment.forEach((controlPoints) => {\n        if (controlPoints.length === 1) {\n          const [{ x, y }] = controlPoints;\n          context.moveTo(x, y);\n          context.lineTo(x, y);\n        } else if (controlPoints.length === 2) {\n          const [{ x: x0, y: y0 }, { x: x1, y: y1 }] = controlPoints;\n          context.moveTo(x0, y0);\n          context.lineTo(x1, y1);\n        } else if (controlPoints.length >= 3) {\n          const points = getCurvePoints(controlPoints, 0.35);\n          const firstPoint = points.shift();\n          assert(typeof firstPoint !== 'undefined');\n\n          context.moveTo(firstPoint.x, firstPoint.y);\n          points.forEach(({ x, y }) => context.lineTo(x, y));\n        }\n      });\n      context.stroke();\n      context.closePath();\n    }\n    context.restore();\n  }\n\n  protected paintGrid() {\n    const { context, segments } = this;\n\n    context.save();\n    context.beginPath();\n    context.strokeStyle = '#b3b2b2';\n    const stepX = CANVAS_WIDTH / segments.size;\n    for (let i = 1; i < segments.size; i += 1) {\n      const x = stepX * i;\n      context.moveTo(x, 0);\n      context.lineTo(x, CANVAS_HEIGHT);\n    }\n    const stepY = CANVAS_HEIGHT / NUM_BUTTONS;\n    for (let i = 1; i < NUM_BUTTONS; i += 1) {\n      const y = stepY * i;\n      context.moveTo(0, y);\n      context.lineTo(CANVAS_WIDTH, y);\n    }\n    context.stroke();\n    context.closePath();\n    context.restore();\n  }\n\n  protected paintCells() {\n    const { context, segments } = this;\n\n    context.save();\n    context.beginPath();\n    context.fillStyle = '#b3b2b2';\n    const stepX = CANVAS_WIDTH / segments.size;\n    const stepY = CANVAS_HEIGHT / NUM_BUTTONS;\n    let cellX = 0;\n    for (let i = 0; i < this.segments.numSegments; i += 1) {\n      const segment = this.segments.getSegment(i);\n      assert(typeof segment !== 'undefined');\n      for (let j = 0; j < segment.length; j += 1) {\n        const cellY = segment[j];\n        if (cellY >= 0) {\n          const x = stepX * cellX;\n          const y = stepY * cellY;\n          context.rect(x, y, stepX, stepY);\n        }\n        cellX += 1;\n      }\n    }\n    context.fill();\n    context.closePath();\n    context.restore();\n  }\n\n  protected paintBar() {\n    const { context } = this;\n\n    context.save();\n    context.fillStyle = 'rgba(211,211,211,0.4)';\n    const stepX = CANVAS_WIDTH / this.numNotes;\n    const x = stepX * this.position;\n    context.fillRect(x, 0, stepX, CANVAS_WIDTH);\n    context.restore();\n  }\n}\n\nexport { defaultOptions };\n",null,".pane {\n  position: relative;\n  width: 512px;\n  height: 256px;\n  /*\n  width: 100%;\n  height: 100%;\n*/\n  overflow: visible;\n  touch-action: none;\n  box-sizing: border-box;\n}\n\n.pane * {\n  touch-action: none;\n}\n\n.pane > canvas {\n  position: relative;\n  width: 512px;\n  height: 256px;\n  /*  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  height: 100%;\n */\n  border: 1px solid gray;\n}\n","function getRelativePointerPosition(pe: PointerEvent, elem: HTMLElement) {\n  const { left, top, width, height } = elem.getBoundingClientRect();\n  const x = pe.clientX - left;\n  const y = pe.clientY - top;\n  const relX = x / width;\n  const relY = y / height;\n  return { x, y, relX, relY, width, height };\n}\n\nfunction getCurvePoints(\n  points: { x: number; y: number }[],\n  tension = 0.5,\n  isClosed = false,\n  numOfSegments = 16,\n): { x: number; y: number }[] {\n  // convert to internal format\n  const pts = new Array<number>();\n  points.forEach(({ x, y }) => pts.push(x, y));\n\n  // The algorithm require a previous and next point to the actual point array.\n  // Check if we will draw closed or open curve.\n  // If closed, copy end points to beginning and first points to end\n  // If open, duplicate first points to beginning, end points to end\n  const firstPoint = points[0];\n  const lastPoint = points[points.length - 1];\n  if (isClosed) {\n    pts.unshift(lastPoint.x, lastPoint.y);\n    pts.unshift(lastPoint.x, lastPoint.y);\n    pts.push(firstPoint.x, firstPoint.y);\n  } else {\n    pts.unshift(firstPoint.x, firstPoint.y); // copy 1. point and insert at beginning\n    pts.push(lastPoint.x, lastPoint.y); // copy last point and append\n  }\n\n  // ok, lets start..\n  const res = new Array<{ x: number; y: number }>();\n\n  // 1. loop goes through point array\n  // 2. loop goes through each segment between the 2 pts + 1e point before and after\n  for (let i = 2; i < pts.length - 4; i += 2) {\n    for (let t = 0; t <= numOfSegments; t += 1) {\n      // calc tension vectors\n      const t1x = (pts[i + 2] - pts[i - 2]) * tension;\n      const t2x = (pts[i + 4] - pts[i]) * tension;\n\n      const t1y = (pts[i + 3] - pts[i - 1]) * tension;\n      const t2y = (pts[i + 5] - pts[i + 1]) * tension;\n\n      // calc step\n      const st = t / numOfSegments;\n\n      // calc cardinals\n      const c1 = 2 * st ** 3 - 3 * st ** 2 + 1;\n      const c2 = -(2 * st ** 3) + 3 * st ** 2;\n      const c3 = st ** 3 - 2 * st ** 2 + st;\n      const c4 = st ** 3 - st ** 2;\n\n      // calc x and y cords with common control vectors\n      const x = c1 * pts[i] + c2 * pts[i + 2] + c3 * t1x + c4 * t2x;\n      const y = c1 * pts[i + 1] + c2 * pts[i + 3] + c3 * t1y + c4 * t2y;\n\n      // store points in array\n      res.push({ x, y });\n    }\n  }\n\n  return res;\n}\n\nexport { getRelativePointerPosition, getCurvePoints };\n",null,"export default class Segments<T> {\n  protected segments: T[][];\n\n  public _size: number;\n\n  protected defaultValueCallback: () => T;\n\n  constructor(size: number, defaultValueCallback: () => T) {\n    this.segments = [new Array(size).fill(undefined).map(defaultValueCallback)];\n    this._size = size;\n    this.defaultValueCallback = defaultValueCallback;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  get numSegments() {\n    return this.segments.length;\n  }\n\n  findSegmentIndex(x: number): {\n    segmentIndex: number;\n    indexInSegment: number;\n  } {\n    let numElements = 0;\n    let segmentIndex = 0;\n    while (\n      segmentIndex < this.segments.length &&\n      numElements + this.segments[segmentIndex].length <= x\n    ) {\n      numElements += this.segments[segmentIndex].length;\n      segmentIndex += 1;\n    }\n    const indexInSegment = x - numElements;\n    return { segmentIndex, indexInSegment };\n  }\n\n  get(x: number, defaultValue: T): T;\n  get(x: number): T | undefined;\n  get(x: number, defaultValue?: T): T | undefined {\n    if (x < 0 || x >= this.size) return defaultValue ?? undefined; // out of range\n    const { segmentIndex, indexInSegment } = this.findSegmentIndex(x);\n    return this.segments[segmentIndex][indexInSegment];\n  }\n\n  set(x: number, ...values: T[]) {\n    if (x < 0 || x >= this.size) return; // out of range\n    let { segmentIndex, indexInSegment } = this.findSegmentIndex(x);\n    for (let i = 0; i < values.length; i += 1) {\n      this.segments[segmentIndex][indexInSegment] = values[i];\n      indexInSegment += 1;\n      if (indexInSegment >= this.segments[segmentIndex].length) {\n        segmentIndex += 1;\n        indexInSegment = 0;\n      }\n      if (segmentIndex > this.segments.length) break;\n    }\n  }\n\n  getSegment(which: number): T[] | undefined {\n    return this.segments[which];\n  }\n\n  getSegmentOf(x: number): { segment: T[]; indexInSegment: number } {\n    const { segmentIndex, indexInSegment } = this.findSegmentIndex(x);\n    return { segment: [...this.segments[segmentIndex]], indexInSegment };\n  }\n\n  getAllSegments() {\n    return this.segments.map((s) => [...s]);\n  }\n\n  /**\n   * Split segments before in front of x.\n   * @param x\n   */\n  splitBefore(x: number): number {\n    if (x < 0 || x >= this.size) return -1; // out of range\n\n    if (x === 0) return 0;\n\n    const { segmentIndex, indexInSegment } = this.findSegmentIndex(x);\n    if (indexInSegment === 0) {\n      // a segment starts at x -> no split necessary\n      return segmentIndex;\n    }\n\n    const segment = this.segments[segmentIndex];\n    const upper = segment.slice(indexInSegment);\n    const lower = segment.slice(0, indexInSegment);\n    this.segments.splice(segmentIndex, 1, lower, upper);\n\n    return segmentIndex + 1;\n  }\n\n  splitAfter(x: number): number {\n    if (x < 0 || x >= this.size) return -1; // out of range\n\n    if (x === this.size - 1) return this.size - 1;\n\n    return this.splitBefore(x + 1) + 1;\n  }\n\n  /** Split segment before and after x.\n   *\n   * @param x The index of the element to put into an isolated segment.\n   */\n  isolate(x: number): number {\n    this.splitAfter(x);\n    return this.splitBefore(x);\n  }\n\n  protected join1(x: number): number {\n    if (x <= 0 || x >= this.size) return -1; // out of range\n\n    const { segmentIndex, indexInSegment } = this.findSegmentIndex(x);\n    if (indexInSegment !== 0) this.joinSegments(segmentIndex);\n\n    return segmentIndex;\n  }\n\n  protected join2(x0: number, x1: number): [number, number] {\n    if (x0 > x1) {\n      const [segmentIndex1, segmentIndex0] = this.join2(x1, x0);\n      return [segmentIndex0, segmentIndex1];\n    }\n\n    if (x1 < 0 || x0 >= this.size) return [-1, -1];\n\n    const clampedX0 = Math.min(this.size - 1, Math.max(x0, 0));\n    const clampedX1 = Math.min(this.size - 1, Math.max(x1, 0));\n\n    const { segmentIndex: segmentIndex0 } = this.findSegmentIndex(clampedX0);\n    const { segmentIndex: segmentIndex1 } = this.findSegmentIndex(clampedX1);\n\n    for (let i = 0; i < segmentIndex1 - segmentIndex0; i += 1) {\n      this.joinSegments(segmentIndex0 + 1);\n    }\n\n    return [x0 < 0 ? -1 : segmentIndex0, x1 >= this.size ? -1 : segmentIndex1];\n  }\n\n  /**\n   * Join segments containing indices x-1 and x.\n   *\n   * @param x The index of the element to join with the element in front of it.\n   */\n  join(x: number): number;\n  /**\n   * Join all segments inbetween x0 and x1 (inclusive).\n   * @param x0 The index of the element in the first element.\n   * @param x1 The index of the element in the second element.\n   */\n  join(x0: number, x1: number): [number, number];\n  join(x0: number, x1?: number): number | [number, number] {\n    return typeof x1 === 'undefined' ? this.join1(x0) : this.join2(x0, x1);\n  }\n\n  /**\n   * Join the segment with the one in front of it.\n   *\n   * @param segmentIndex The index of the segment to join with its predecessor.\n   */\n  joinSegments(segmentIndex: number): number {\n    if (segmentIndex <= 0 || segmentIndex >= this.numSegments) return -1;\n\n    const lower = this.segments[segmentIndex - 1];\n    const upper = this.segments[segmentIndex];\n    this.segments.splice(segmentIndex, 1);\n    lower.push(...upper);\n\n    return segmentIndex - 1;\n  }\n\n  resize(size: number) {\n    if (size > this.size) {\n      const diff = size - this.size;\n      this.segments.push(\n        new Array(diff).fill(0).map(this.defaultValueCallback),\n      );\n      this._size = size;\n    } else if (size > 0 && size < this.size) {\n      this.splitBefore(size);\n      const { segmentIndex } = this.findSegmentIndex(size);\n      this.segments.splice(segmentIndex);\n      this._size = size;\n    }\n  }\n}\n",null,null],"names":[],"version":3,"file":"index.js.map"}